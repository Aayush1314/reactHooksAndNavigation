[{"D:\\widgets\\src\\index.js":"1","D:\\widgets\\src\\App.js":"2","D:\\widgets\\src\\app.js":"3","D:\\widgets\\src\\components\\accordion.js":"4","D:\\widgets\\src\\components\\search.js":"5","D:\\widgets\\src\\components\\dropdown.js":"6"},{"size":147,"mtime":1607242269918,"results":"7","hashOfConfig":"8"},{"size":509,"mtime":1607247286008,"results":"9","hashOfConfig":"8"},{"size":1573,"mtime":1607582612889,"results":"10","hashOfConfig":"8"},{"size":1995,"mtime":1607450599536,"results":"11","hashOfConfig":"8"},{"size":3720,"mtime":1607517105300,"results":"12","hashOfConfig":"8"},{"size":977,"mtime":1607540561756,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1r8ymvc",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"16"},"D:\\widgets\\src\\index.js",[],["30","31"],"D:\\widgets\\src\\App.js",[],"D:\\widgets\\src\\app.js",["32"],"D:\\widgets\\src\\components\\accordion.js",["33"],"import React, { useState } from \"react\"\r\n\r\nconst Accordion = ({ items }) => {\r\n\r\n\r\n    const [activeinddex, setActiveIndex] = useState(null)\r\n\r\n\r\n    //HELPER FUNCTION FOR ONCLICK\r\n    const onTitleClick = (index) => {\r\n        setActiveIndex(index)\r\n    }\r\n    //MAIN FUNTION TO EXPORT\r\n    const renderedItems = items.map((item, index) => {\r\n        return (\r\n            <React.Fragment key={item.title}>\r\n\r\n                <div class=\"card\" onClick={() => onTitleClick(index)}>\r\n                    <div class=\"card-header\" id=\"headingOne\">\r\n                        <h2 class=\"mb-0\">\r\n                            <button class=\"btn btn-link btn-block text-left\" type=\"button\" data-toggle=\"collapse\" data-target={`#toggle${index}`} aria-expanded=\"true\" aria-controls={`toggle${index}`}>\r\n                                {item.title}\r\n                            </button>\r\n                        </h2>\r\n                    </div>\r\n                    <div id={`toggle${index}`} class=\"collapse\" aria-labelledby=\"headingOne\" data-parent=\"#accordionExample\">\r\n                        <div class=\"card-body\">\r\n                            <div class=\"media\">\r\n                                <div class=\"media-body\">\r\n                                    <span dangerouslySetInnerHTML={{ __html: item.snippet }}></span>\r\n                                </div>\r\n                                <a href= {`https://en.wikipedia.org?cruid=${item.pageid}`} class=\"align-self-center ml-3 btn btn-dark\">GO</a>\r\n                            </div>\r\n                                \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n            </React.Fragment>\r\n\r\n        )\r\n    })\r\n    return(\r\n                <div className=\"col-6 \">\r\n                    <div className=\"accordion border border-dark\" id=\"accordionExample\">\r\n                        {renderedItems}\r\n                    </div>\r\n                </div>\r\n    )\r\n}\r\n\r\nexport default Accordion","D:\\widgets\\src\\components\\search.js",["34"],"import React, { useState, useEffect } from \"react\"\r\nimport axios from 'axios'\r\nimport Accordian from './accordion'\r\nimport Accordion from \"./accordion\"\r\n\r\nconst Search = () => {\r\n\r\n    const [Term, setTerm] = useState(\"Program\")\r\n    const [DebouncedTerm, setDebouncedTerm] = useState(Term)\r\n    const [Results, setResults] = useState([])\r\n    //var timeOutId\r\n\r\n    useEffect(()=>{\r\n        const timeOutId = setTimeout(()=>{\r\n            setDebouncedTerm(Term)\r\n        }, 1000)\r\n\r\n        return(()=>{\r\n            clearTimeout(timeOutId)\r\n        })\r\n    },[Term])\r\n\r\n    useEffect(()=>{\r\n        const APIcall = async ()=>{\r\n            const { data } = await axios.get(\"https://en.wikipedia.org/w/api.php\",{\r\n                params:{\r\n                    action: \"query\",\r\n                    list:\"search\",\r\n                    origin: \"*\",\r\n                    format: \"json\",\r\n                    srsearch: DebouncedTerm\r\n                }\r\n            })\r\n            if (data.query){  \r\n              setResults(data.query.search)\r\n            }\r\n        }\r\n        APIcall()\r\n    },[DebouncedTerm])\r\n\r\n    /*\r\n    We have to declare 2 diff useEffects due to this warning in console:\r\n        React Hook useEffect has a missing dependency: 'Results.length'. \r\n        Either include it or remove the dependency array  react-hooks/exhaustive-deps\r\n    \r\n    useEffect(function(){\r\n        // Cannot declare first argument of useEffect as async\r\n        // So create a new function inside useEffect and declare it async and then call it.\r\n        \r\n        \r\n        ============First method to declare a async function in useEffect=========\r\n\r\n        (async ()=>{\r\n            await axios.get(\"URL\")\r\n        })()\r\n\r\n        \r\n        //===============Second method to declare a async function in useEffect========================= \r\n        const APIcall = async ()=>{\r\n          const { data } = await axios.get(\"https://en.wikipedia.org/w/api.php\",{\r\n              params:{\r\n                  action: \"query\",\r\n                  list:\"search\",\r\n                  origin: \"*\",\r\n                  format: \"json\",\r\n                  srsearch: Term\r\n              }\r\n          })\r\n          if (data.query){  \r\n            setResults(data.query.search)\r\n          }\r\n          \r\n        }\r\n        if (Term && !Results.length ){\r\n            APIcall()\r\n        }\r\n        else{\r\n            timeOutId = setTimeout(()=>{\r\n                if (Term){\r\n                    APIcall();\r\n                }\r\n            },1000)\r\n            // This is return statement for useEffect.\r\n            // This returns only a function which is called first whenever the page is rerendered.\r\n            return(()=>{\r\n                clearTimeout(timeOutId)\r\n            })\r\n        }\r\n\r\n        \r\n        \r\n    },[Term])\r\n    */\r\n\r\n    return (\r\n        <div>\r\n            <div class=\"form-group\">\r\n                <label htmlFor=\"Search\">Search Here</label>\r\n                <input \r\n                    type=\"text\" \r\n                    value= {Term} \r\n                    onChange={ (event)=> {\r\n                        setTerm(event.target.value)\r\n                        /*\r\n                        //My way to use clear time out\r\n                        if (timeOutId){\r\n                            clearTimeout(timeOutId)\r\n                        }}\r\n                        */\r\n                        } \r\n                    }\r\n                    class=\"form-control\" \r\n                    id=\"Search\"  \r\n                    placeholder=\"Enter Search Term\" \r\n                />  \r\n            </div>\r\n            <br />\r\n            <Accordion items= {Results} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search","D:\\widgets\\src\\components\\dropdown.js",["35"],"import React from 'react'\r\n\r\nconst DropDown = ({ colors, selected, onSelectChange }) => {\r\n    \r\n    const renderedColors = colors.map((color) => {\r\n\r\n        if (selected.Color===color.Color){\r\n            return null\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <a onClick={ ()=> onSelectChange(color) }  class=\"dropdown-item\" href=\"#\">{color.Label}</a>\r\n            </React.Fragment>\r\n        )\r\n    })\r\n    \r\n\r\n    return (\r\n       \r\n        <div class=\"dropdown w-100 d-flex justify-content-center\">\r\n            <button class=\"btn btn-secondary dropdown-toggle w-50\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                {selected.Label}\r\n            </button>\r\n            <div class=\"dropdown-menu w-50\" aria-labelledby=\"dropdownMenuButton\">\r\n                {renderedColors}\r\n            </div>\r\n        </div>\r\n        \r\n        \r\n    )\r\n}\r\n\r\nexport default DropDown",{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":5,"column":8,"nodeType":"42","messageId":"43","endLine":5,"endColumn":16},{"ruleId":"40","severity":1,"message":"44","line":6,"column":12,"nodeType":"42","messageId":"43","endLine":6,"endColumn":24},{"ruleId":"40","severity":1,"message":"45","line":3,"column":8,"nodeType":"42","messageId":"43","endLine":3,"endColumn":17},{"ruleId":"46","severity":1,"message":"47","line":13,"column":17,"nodeType":"48","endLine":13,"endColumn":91},"no-native-reassign",["49"],"no-negated-in-lhs",["50"],"no-unused-vars","'Dropdown' is defined but never used.","Identifier","unusedVar","'activeinddex' is assigned a value but never used.","'Accordian' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]